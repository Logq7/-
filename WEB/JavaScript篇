Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。
Object.defineProperty(obj,prop,descriptor)   对象里目前存在的属性描述符主要有两种形式： 数据描述符和存取描述符.二者不能同时在函数内定义。
数据描述符： 拥有可写或不可写值的属性*
  可选键值：  
  configurable: 当且仅当configurable为true时，改属性描述符才能够被改变，也能被删除 
  enumerable:  当其值为true时，该属性才能够出现在对象的枚举属性中，默认为false 
  writable: 当且仅当该属性的值为true时，该属性才能被赋值运算符改变， 默认为false。 
  value： 该属性对应的值，可以是任意有效的javascript的值（数值，对象，函数等），默认为undefined
存取描述符： 由一对getter-setter函数功能来描述的属性*    
  可选键值： 
  configurable: 当且仅当configurable为true时，改属性描述符才能够被改变，也能被删除 
  enumerable:  当其值为true时，该属性才能够出现在对象的枚举属性中，默认为false 
  get:  给属性提供getter的方法，如果没有 getter 则为undefined。当我们读取某个属性的时候，其实是在对象内部调用了该方法，此方法必须要有return语句。该方法返回值被用作属性值。默认为 undefined 。
  set：设置属性值的方法， 如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。也就是说，当我们设置某个属性的时候，实际上是在对象的内部调用了该方法。（注：该笔记为浏览某篇CSDN博客所摘录整理而得）

var a = {};
  var name = '';
  var sex = '';
  Object.defineProperty(a,'name',{
    set:function(value){
      name = value;
      console.log('赋值操作'+name);
    },
    get:function(){
      return name;
    }
  });
  Object.defineProperty(a,'sex',{
    set:function(value){
      sex = value;
      console.log('赋值操作'+sex);
    },
    get:function(){
      return sex;
    }
  })
  a.name = 'Adam';
  a.sex = 'male';
  console.log(a.name);
  console.log(a.sex);
